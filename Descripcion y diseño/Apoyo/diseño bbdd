DISEÑO BBDD:

Finalidad:
	Poder consultar los distintos ataques de la distribución "Kali Linux" atendiendo a diversos parámetros, como pueden ser el nombre del ataque, protocolo sobre el que actúa, tipo de ataque, objetivo del ataque, etc.

Casos de uso: 
	- Obtener información sobre un ataque en concreto.
	- Medir el nivel de seguridad de una aplicación o sitio web concreto.
	- Obtener herramientas necesarias para realizar un ataque, teniendo claro cual será el objetivo.  

Búsqueda y organización de los datos de la base de datos: 
	Se han recopilado todos los ataques de la distribución de Kali, organizados inicialmente en función de la categoría de los ataques. 

Palabras clave: 
	- Wifi
	- WEP
	- WPS
	- WPA
	- WPA2
	- Ataque diccionario
	- Ataque fuerza bruta
	- Capturar paquetes
	- Análisis de paquetes
	- MiTM
	- Spoofing
	- Recopilacion informacion
	- Escaneo de puertos
	- C
	- Arquitectura cliente/servidor
	- TCP
	- IP
	- IPSEC
	- IKE
	- Ingeniería social
	- ARP
	- Análisis de vulnerabilidades
	- Reconocimiento de redes
	- Python
	- Multiplataforma
	- Código abierto
	- Escanear programas 
	- Defectos en configuraciones 
	- Escalar privilegios
	- Phising
	- Java
	- HTTP
	- HTTPS
	- SQLinjection
	- Ruby
	- Wordpress
	- Base de datos
	- MySQL
	- SQLite
	- PostgreSQL
	- MDB
	- Microsoft SQL server
	- Perl
	- rainbow tables
	- IDS
	- sniffer
	- ingenieria inversa
	- java
	- exploit
	- post exploit
	- powershell
	- php
	- forense
	- almacenamiento de informacion
	- DoS

Agrupación de palabras clave:
	- Wifi: WEP, WPA, WPA2, WPS
	- Protocolo: WEP, WPA, WPA2, WPS, TCP, IP, IPSEC, IKE, ARP, HTTP, HTTPS, ICMP
	- Obtención de credenciales: ataque fuerza bruta/diccionario, escalar privilegios, phising, rainbow tables, post exploit
	- Reconocimiento de redes: sniffer, escaneo de puertos, almacenamiento de informacion
	- MiTM
	- Spoofing
	- Lenguaje: C, python, ruby, perl, java, powershell, php
	- Arquitectura cliente servidor
	- Ingeniería social
	- Análisis de vulnerabilidades: escaner de programas, defectos en configuraciones, IDS, exploit
	- Multiplataforma
	- Código abierto
	- Bases de datos: SQLinjection, SQLite, MySQL, PostgreSQL, MDB, Microsoft SQL Server
	- Ingeniería inversa
	- Forense
	- DoS, escalar privilegios.
	- Activos: sistemas VPN, linux, unix, wordpress, Microsoft sql server

Dividir información en tablas:
	- Ataques
	- Lenguajes
	- Protocolos
	- Enum_info
	- Obtener_info
	- Enum_vulnera
	- Análisis_vulnera
	- Enum_Reco
	- Reco 
	
Identificar columnas de cada tabla:
	- Ataques: ID_ATAQUE, nombre, descripción, ID_LENGUAJE, ID_PROTOCOLO
	- Lenguajes: ID_LENGUAJE, nombre
	- Protocolos: ID_PROTOCOLO, nombre, wifi
	- Enum_info: ID_TIPO, nombre
	- Obtener_info: ID_ATAQUE, ID_TIPO
	- Enum_vulnera: ID_VULNERABILIDAD, nombre
	- Análisis_vulnera: ID_ATAQUE, ID_VULNERABILIDAD
	- Enum_reco: ID_RECONOCIMIENTO, nombre
	- Reco: ID_ATAQUE, ID_RECONOCIMIENTO 

Especificar clave principal de cada tabla:
	- Ataques: ID_ATAQUE
	- Lenguajes: ID_LENGUAJE
	- Protocolos: ID_PROTOCOLO
	- Enum_info: ID_TIPO
	- Obtener_info: ID_ATAQUE, ID_INFO
	- Enum_vulnera: ID_VULNERABILIDAD
	- Analisis_vulnera: ID_ATAQUE, ID_VULNERABILIDAD
	- Enum_reco: ID_RECONOCIMIENTO
	- Reco: ID_ATAQUE, ID_RECONOCIMIENTO

Definir relaciones entre tablas: HECHO

Se va a implementar un mecanismo de búsqueda rápida para que el usuario pueda realizar búsquedas de una manera más personal. Si tiene claro lo que quiere buscar este método será mucho más rápido que rellenando campos de un formulario. 

Ajustar diseño: 
	Realizar pruebas de funcionamiento con ejemplos para ver si se puede obtener los resultados previstos en las tablas. 